load("~/R_data_files/iris.data.txt")
load("~/R_data_files/iris.data.txt")
load("~/R_data_files/Fake_SociaL_Media_Data.csv")
mytext -> "this is a piece of text"
myText <- "this is a piece of text"
myText
c(43, 42, 12, 8, 5)
myFamilyages <- c(58,56,19)
myFamilyages
sum(myFamilyages)
myFamilynames <- c(Andy, Laura, Ian)
myFamilynamges <- c("Andy","Laura","Ian")
myFamilynamges
myFamilynames <-c("Andy","Laura","Ian")
myFamilynames
myFamilygenders <-c("Male","Female","Male")
myFamily <- data.frame(myFamilynames + myFamilyages, myFamilygenders)
myFamily <- data.frame(myFamilynames, + myFamilyages, myFamilygenders)
myFamily
str(myFamily)
summary(myFamily)
sn <- read.csv(“social_network.csv”, header = T)
sn <- ead.csv("Fake_Social_Media_Data.csv", header = T)
sn <- read.csv("Fake_Social_Media_data.csv", header = T)
sn <- read.csv(“Fake_Social_Media_Data.csv”, header = T)
myText
myFamily
read.csv("HairEyeColor.csv")
demo(read.csv)
demo(read.csv(HairEyeColor))
demo(read.csv())
help ("read.csv")
read.csv("HairEyeColor.csv", header = TRUE)
sn <- read.csv(“social_network.csv”, header = T)
1 + 2
x = 1
x
help(c)
print("Hello World")
print(25.6 + 22.11)
install.packages("plotrix")
apple <- c('red','green',"yellow")
print(apple)
print(class(apple))
list1 <- list(c(2,5,3),21.3,sin)
print(list1)
BMI <- 	data.frame(
gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
print(BMI)
search()
install.packages("ggplot2")
library(ggplot2)
installed.packages(psych)
install.packages("psych")
library(psych)
sample.delta<-function(alpha=.05,sigma,delta,a,endpoint=10){
nu1<-a-1
table<-NULL
for(i in 2:endpoint){
nu2<-a*(i-1)
nonpar<-(i*delta^2)/(2*sigma^2)
F.alpha=qf((1-alpha),nu1,nu2)
beta<-pf(F.alpha,nu1,nu2,nonpar)
power<-1-beta
table.1<-c(i,nu2,nonpar,F.alpha,beta,power)
table<-rbind(table,table.1)
}
names<-c('n','df2','delta','Fcrit','beta','power')
colnames(table)<-names
rownames(table)<-NULL
return(table)
}
sample.delta(alpha=.05,sigma=1.747609,delta=1,endpoint=10)
sample.delta(alpha=.05,sigma=1.747609,delta=1,a=4,endpoint=10)
sample.delta(alpha=.05,sigma=1.747609,delta=1,a=4,endpoint=50)
sample.delta(alpha=.05,sigma=1.747609,delta=1,a=4,endpoint=100)
sample.delta(alpha=.05,sigma=1.747609,delta=2,a=4,endpoint=30)
sample.percent<-function(alpha=.05,Percent,a,endpoint=10){
nu1<-a-1
table<-NULL
for(i in 2:endpoint){
nu2<-a*(i-1)
nonpar<-a*i*((1+(.01*Percent))^2-1)
F.alpha=qf((1-alpha),nu1,nu2)
beta<-pf(F.alpha,nu1,nu2,nonpar)
power<-1-beta
table.1<-c(i,nu2,nonpar,F.alpha,beta,power)
table<-rbind(table,table.1)
}
names<-c('n','df2','delta','Fcrit','beta','power')
colnames(table)<-names
rownames(table)<-NULL
return(table)
}
sample.percent(alpha=.05,Percent=.15,a=4,endpoint=30)
sample.percent(alpha=.05,Percent=.15,a=4,endpoint=50)
sample.percent(alpha=.05,Percent=.15,a=4,endpoint=50,sigma=1.747609)
sample.percent(alpha=.05,Percent=15,a=4,endpoint=20)
q()
(X <- matrix(data = c(rep(1, times = 8),
+                      rep(c(-1,1), times = 4),
+                      rep(c(-1,1), each = 2, times = 2),
+                      rep(c(-1,1), each = 4),
+                      c(-1,1,1,-1,1,-1,-1,1)), ncol = 5))
[,1] [,2] [,3] [,4] [,5]
[1,]    1   -1   -1   -1   -1
[2,]    1    1   -1   -1    1
[3,]    1   -1    1   -1    1
[4,]    1    1    1   -1   -1
[5,]    1   -1   -1    1    1
[6,]    1    1   -1    1   -1
[7,]    1   -1    1    1   -1
[8,]    1    1    1    1    1
(X <- matrix(data = c(rep(1, times = 8),
+                      rep(c(-1,1), times = 4),
+                      rep(c(-1,1), each = 2, times = 2),
+                      rep(c(-1,1), each = 4),
+                      c(-1,1,1,-1,1,-1,-1,1)), ncol = 5))
t(X) %*% X
(X <- matrix(data = c(rep(1, times = 12),
+                   c(6,6,6,6,6,6,10,10,10,10,10,10)), ncol = 2))
t(X) %*% X
(X <- matrix(data = c(rep(1, times = 12),
+                   c(-1,-1,-1,-1,-1,-1,1,1,1,1,1,1)), ncol = 2))
t(X) %*% X
(X <- matrix(data = c(rep(1, times = 12),
+                      c(1,1,1,1,5.5,5.5,5.5,5.5,10,10,10,10,10,10)), ncol = 2))
t(X) %*% X
(X <- matrix(data = c(rep(1, times = 12),
+                      c(-1,-1,-1,-1,0,0,0,0,1,1,1,1,1,1)), ncol = 2))
t(X) %*% X
(X <- matrix(data = c(rep(1, times = 12),
+                      c(-1,-1,-1,0,0,0,1,1,1,2,2,2)), ncol = 2))
t(X) %*% X
save.image("C:\\Users\\owner\\Documents\\Problem3_RMS")
q()
x + y
workshop <- c(1, 2, 1, 2, 1, 2, 1, 2)
workshop
workshop <- c(1, 2, 1, 2, 1, 2, 1, 2)
workshop <- c(1, 2, 1, 2, 1, 2, 1, 2)
workshop
gender <- c("f", "f", "f", NA, "m", "m", "m", "m")
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4)
q2 <- c(1, 1, 2, 1, 5, 4, 3, 5)
q3 <- c(5, 4, 4,NA, 2, 5, 4, 5)
q4 <- c(1, 1, 3, 3, 4, 5, 4, 5)
str(gender)
class(gender)
typeof(gender)
length(gender)
q1
class(q1)
typeof(q1)
q1
q1[5]
q1[ c(5, 6, 7, 8) ]
q1[ 5:8 ]
q1[ gender == "m" ]
mean( q1[ gender == "m" ])
mySub
class(mySub)
mySub<-gender == "m"
mySub
class(mySub)
# Now as a factor
workshop <- c(1, 2, 1, 2, 1, 2, 1, 2)
workshop <- factor(workshop)
workshop
class(workshop)
table(workshop)
mean(workshop) #generates error now.
gender[ workshop == 2 ]
gender[ workshop == "2" ]
# Recreate workshop, making it a factor, and
# including levels that don't yet exist.
workshop <- c(1, 2, 1, 2, 1, 2, 1, 2)
workshop <- factor(
workshop,
levels=c( 1,   2,     3,      4),
labels=c("R", "SAS", "SPSS", "Stata")
workshop
table(workshop)
# Recreate it with just the levels it
# curently has.
workshop <- c(1, 2, 1, 2, 1, 2, 1, 2)
workshop <- factor(
workshop,
levels=c( 1,  2),
labels=c("R","SAS")
)
workshop
table(workshop)
gender[ workshop==2 ]  # "character(0)" means the output is class character, but
#   has length 0--that is, there is no gender value with
#   with workshop==2
gender[ workshop=="2" ]  # compare these results to the earlier ones. What is happening?
gender[ workshop=="SAS" ]
# learn more about the gender vector
gender
str(gender) # Note its structure: stored as integers.
# The "m" and "f" no longer exist.
class(gender) # every object has a class
typeof(gender) # how it is stored internally
as.integer(gender) # its representation as integers (hidden when gende
# Recreate gender and make it a factor,
# keeping simpler m and f as labels.
gender <- c("f", "f", "f", NA, "m", "m", "m", "m")
gender <- factor(gender)
gender
workshop[ gender == "m" ]
# mydata <- data.frame(workshop, sex = gender, q1, q2, q3, q4)
# mydata
# Some functions operating on data frames
mydata
names(mydata)
colnames(mydata)
rownames(mydata)
row.names(mydata)
length(mydata) # number of columns
str(mydata)
dim(mydata)
class(mydata)
typeof(mydata) # to be understood below?
mylist <- list(
workshop = workshop,
sex = gender,
q1 = q1,
q2 = q2,
q3 = q3,
q4 = q4,
mymatrix = mymatrix)
mylist
# Selecting components by index number.
mylist[2] # returns the 2nd list element, but still as a list (with one element)
class(mylist[2])
mylist[2][5:8] # Bad!
x<-1:10
x2
str(marine)
order(marine$Family)
marine[order(marine$Family),]
marine[c(2, 4, 6, 10, 11, 1, 3, 7, 8, 9, 5),]
marine[order(marine$Family),]
unique(marineSorted)
unique(marine[with(marine, order(Family,-Length)),])
test<-c(1,2,6,2,1,3,6)
unique(test)
unique(test)
(test2<-data.frame(a=c(1:4,1,2),b=c(11:14,11,12),c=c(21:24,21,23)))
unique(test2)
unique(test2)
duplicated(test)
duplicated(test2)
test[duplicated(test)]
marineSorted[2,3] <- 50
head(marineSorted)
dirOUT="C:/Users/owner/Documents/RIT/611_StatisticalSoftware/R_Week_8/R-Assign_7/"
sink(paste0(dirOUT,"HjerpeLaura_Username_HW7_Ouput.txt"))
dirdata<-"C:/Users/owner/Documents/RIT/611_StatisticalSoftware/R_Week_8/R-Assign_7/"
## Q1 Opened file with load command.##
load(file = "mydata.Rdata")
## Q1 Listed data after loading.  Copied data to file called temp. ##
mydata
temp <- mydata
## Q1 Assigned value of 9 with is.na command. Listed temp values. ##
temp [is.na(temp)] <- 9
temp
## Q1 Assigned value of 20 to values of 4 and NA to values of 20. Listed temp values. ##
temp [temp == 4] <- 20
temp [temp == 5] <- NA
temp
## Q2 Read in Games¬_Plus.dat.  Attempted to calculate MaxRun and RuntoDate##
## Attempted to have missing data for RunsToDate of Runs data was missing. ##
widths<-(c(1,-1,2,-1,20,-1,2,-1,2,10))
colNames<-c("Month","Day","Team","Hits","Runs", "Complete")
gamestats<-read.fwf(("Games_Plus.dat"), width=widths,
na.strings = ".", fill=TRUE)
colnames(gamestats)<-colNames
RunsToDate = 0
MaxRuns = 0
gamestats
gamestats<-within(gamestats,{
RunsToDate<-ifelse Runs == ".", ".",cumsum(Runs)
MaxRuns<-cummax(Runs)
}
)
gamestats
## Q3 Replace T with 0 in RochesterSnowFall dataset ##
## Read in and print RochesterSnowfall data set. ##
snow<-read.csv(("RochesterSnowfall.csv"), header = FALSE)
snow[2:10,]
## Q3 Command to replace T with 0 worked but added V numbers in header. ##
snow[snow == "T"] <- 0
snow[2:10,]
## Q3 Function to change T to 0 worked but added V numbers in header. ##
## Generated error message. ##
myTis0 <- function(x) {x[x == "T"] <- 0; x}
snow[,2:10] <- lapply (snow[,2:10], myTis0)
snow
nobs(snow[2:11,])
## Q3 This function replaced T with 0 but added V numbers in header. ##
snow$Sep [snow$Sep == "T"] <- 0
snow$Oct [snow$Oct == "T"] <- 0
snow$Nov [snow$Nov == "T"] <- 0
snow$Dec [snow$Dec == "T"] <- 0
snow$Jan [snow$Jan == "T"] <- 0
snow$Feb [snow$Feb == "T"] <- 0
snow$Mar [snow$Mar == "T"] <- 0
snow$Apr [snow$Apr == "T"] <- 0
snow$May [snow$May == "T"] <- 0
snow[2:11,]
sink()
install.packages(c("glue", "lubridate", "plyr", "Rcpp", "stringi", "stringr"))
library(haven)
3 + 5
12/7
# Assign 3 to a
a <- 3
# Assign 5 to b
b <- 5
# Add a and b
a + b
# Change value of a to 10
a <- 10
a + b
sqrt(a)
#Exercise
genome_length_mb <- 4.6
genome_length_mb
genome_length_mb / 978.0
genome_length_mb <- 3000.0
genome_length_mb / 978.0
genome_weight_pg <- genome_length_mb / 978.0
genome_length_mb <- 100
genome_weight_pg
# Vectors and data types
glengths <- c(4.6, 3000, 50000)
glengths
species <- c("ecoli", "human", "corn")
species
#lengths gives the length of the vector
length(glengths)
length(species)
5 * glengths
# You can add two vectors together
new_lengths <- glengths + glengths
new_lengths
# class() indicates type if element
class(glengths)
class(species)
# You can add data in two vectors together
new_lengths <- glengths + species
# str() provides an overview of the object and the elements it contains
str(glength)
# str() provides an overview of the object and the elements it contains
str(glengths)
#num [1:3] 4.6 3000 50000
str(species)
install.packages("tidyverse")
library(tidyverse)
install.packages("RSQLite")
setwd("C:/Users/lrhje/Repositories/data-primers/Shapefiles Primer")
